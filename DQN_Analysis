{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/alexncoleman/Wildfire-reinforcement-learning/blob/main/DQN_Analysis\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "lMffGzMPLApc"
      },
      "outputs": [],
      "source": [
        "import sys\n",
        "import math\n",
        "import random\n",
        "import copy\n",
        "import random\n",
        "#from tqdm import tqdm\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from matplotlib import cm\n",
        "from matplotlib import animation as animation\n",
        "\n",
        "from PIL import Image, ImageSequence\n",
        "import matplotlib as mpl\n",
        "\n",
        "import os\n",
        "import random\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cZL46gmdLBNP",
        "outputId": "70255e03-7c9c-4cfa-d256-0fdfcd49b089"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "1aTzF-aYLEiT"
      },
      "outputs": [],
      "source": [
        "##################################################################\n",
        "#test with real map\n",
        "#forest = Image.open('drive/MyDrive/CA/land_data/BigChimney_canopy.tif')\n",
        "\n",
        "#ignition = np.loadtxt('drive/MyDrive/CA/land_data/Brattain_2020_ignition_forest.txt')\n",
        "\n",
        "#altitude = Image.open('drive/MyDrive/CA/land_data/BigChimney_slope.tif')\n",
        "\n",
        "#density = Image.open('drive/MyDrive/CA/land_data/BigChimney_density.tif')\n",
        "###################################################################################\n",
        "\n",
        "\n",
        "###################################################################################\n",
        "\n",
        "\n",
        "#forest = Image.open('drive/MyDrive/CA/land_data/canopy_Ferguson_2018.tif')\n",
        "\n",
        "#ignition = np.loadtxt('drive/MyDrive/CA/land_data/Ferguson_2018_ignition_forest.txt')\n",
        "\n",
        "#altitude = Image.open('drive/MyDrive/CA/land_data/slope_Ferguson_2018.tif')\n",
        "\n",
        "#fuel = Image.open('images/fuel_Ferguson_2018.tif')\n",
        "\n",
        "#density = Image.open('drive/MyDrive/CA/land_data/density_Ferguson_2018.tif')\n",
        "\n",
        "\n",
        "###################################################################################\n",
        "#test with real map\n",
        "forest = Image.open('drive/MyDrive/ML/CA/land_data/canopy_Chimney_2016.tif')\n",
        "\n",
        "ignition = np.loadtxt('drive/MyDrive/ML/CA/land_data/Ferguson_2018_ignition_forest2.txt').astype(int)\n",
        "np.save('drive/MyDrive/ML/CA/land_data/Ferguson_2018_ignition_forest2.npy', ignition)\n",
        "ignition = np.load('drive/MyDrive/ML/CA/land_data/Ferguson_2018_ignition_forest2.npy', mmap_mode = 'r').astype(int)\n",
        "\n",
        "altitude = Image.open('drive/MyDrive/ML/CA/land_data/slope_Chimney_2016.tif')\n",
        "\n",
        "#fuel = Image.open('images/fuel_Ferguson_2018.tif')\n",
        "\n",
        "density = Image.open('drive/MyDrive/ML/CA/land_data/density_Chimney_2016.tif')\n",
        "\n",
        "###################################################################################\n",
        "#test with real map\n",
        "#forest = Image.open('drive/MyDrive/CA/land_data/canopy_JakeChimney_2016.tif')\n",
        "\n",
        "#ignition = np.loadtxt('drive/MyDrive/CA/land_data/Chimney_2016_ignition_forest2.txt')\n",
        "\n",
        "#altitude = Image.open('drive/MyDrive/CA/land_data/slope_JakeChimney_2016.tif')\n",
        "\n",
        "#fuel = Image.open('images/fuel_Ferguson_2018.tif')\n",
        "\n",
        "#density = Image.open('drive/MyDrive/CA/land_data/density_JakeChimney_2016.tif')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vNI8mrPLTpaP",
        "outputId": "39a2984c-39c3-4beb-adb5-ab0eabadaa7c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(899, 982)"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "np.array(forest).shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "lkSvw-4Ri7zX"
      },
      "outputs": [],
      "source": [
        "#plt.imshow(np.array(forest))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "rheyDRM0LH8k"
      },
      "outputs": [],
      "source": [
        "# def random_ignition(dim_x,dim_y):\n",
        "#  field = np.ones((dim_x,dim_y))*2\n",
        "#  x = random.randint(300,dim_x-300)\n",
        "#  y = random.randint(300,dim_y-300)\n",
        "#  for i in range(x,x+10):\n",
        "#    for j in range(y,y+10):\n",
        "#      field[i,j] = 3\n",
        "#  return field\n",
        "\n",
        "def random_ignition(dim_x,dim_y):\n",
        "    field = np.ones((dim_x,dim_y))*2\n",
        "    x = random.randint(30,dim_x-30)\n",
        "    y = random.randint(30,dim_y-30)\n",
        "    for i in range(x,x+4):\n",
        "        for j in range(y,y+4):\n",
        "            field[i,j] = 3\n",
        "    return field.astype(int)\n",
        "\n",
        "def centre_ignition(dim_x,dim_y):\n",
        "    field = np.ones((dim_x,dim_y))*2\n",
        "    x = round(dim_x/2)\n",
        "    y = round(dim_y/2)\n",
        "    for i in range(x,x+3):\n",
        "        for j in range(y,y+3):\n",
        "            field[i,j] = 3\n",
        "    return field.astype(int)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "m4S8ggdELLJL"
      },
      "outputs": [],
      "source": [
        "forest = np.array(forest)\n",
        "\n",
        "altitude = np.round(np.array(altitude)/np.max(altitude), 3)\n",
        "\n",
        "density = np.array(density)\n",
        "\n",
        "density = np.round(density/np.max(density), 3)\n",
        "\n",
        "forest[forest<-999.] = 0.\n",
        "\n",
        "forest = forest/np.max(forest)\n",
        "\n",
        "\n",
        "from PIL import Image\n",
        "from skimage.transform import resize\n",
        "\n",
        "forest = resize(forest, (128, 128))\n",
        "altitude = resize(altitude, (128, 128))\n",
        "density = resize(density, (128, 128))\n",
        "\n",
        "density = np.round(density/np.max(density))\n",
        "\n",
        "n_row = forest.shape[0]\n",
        "n_col = forest.shape[1]\n",
        "\n",
        "number_MC = 20\n",
        "#################################################################\n",
        "generation = 501\n",
        "n_row = forest.shape[0]\n",
        "n_col = forest.shape[1]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "LGpkL_AlLNSL"
      },
      "outputs": [],
      "source": [
        "def colormap(i,array):\n",
        "    np_array = np.array(array)\n",
        "    plt.imshow(np_array, interpolation=\"none\", cmap=cm.plasma)\n",
        "    plt.title(i)\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "F4QM05t8LO8Y"
      },
      "outputs": [],
      "source": [
        "def init_vegetation():\n",
        "    veg_matrix = [[0 for col in range(n_col)] for row in range(n_row)]\n",
        "    for i in range(n_row):\n",
        "        for j in range(n_col):\n",
        "            veg_matrix[i][j] = 1\n",
        "    return veg_matrix\n",
        "\n",
        "def init_density():\n",
        "    den_matrix = [[0 for col in range(n_col)] for row in range(n_row)]\n",
        "    for i in range(n_row):\n",
        "        for j in range(n_col):\n",
        "            den_matrix[i][j] = 1.0\n",
        "    return den_matrix.astype(int)\n",
        "\n",
        "def init_altitude():\n",
        "    alt_matrix = [[0 for col in range(n_col)] for row in range(n_row)]\n",
        "    for i in range(n_row):\n",
        "        for j in range(n_col):\n",
        "            alt_matrix[i][j] = 1\n",
        "    return alt_matrix\n",
        "\n",
        "def init_forest():\n",
        "    forest = [[0 for col in range(n_col)] for row in range(n_row)]\n",
        "    for i in range(n_row):\n",
        "        for j in range(n_col):\n",
        "            forest[i][j] = 2\n",
        "    # ignite_col = int(n_col//2)\n",
        "    # ignite_row = int(n_row//2)\n",
        "    ignite_col = int(n_col//2)\n",
        "    ignite_row = int(100)\n",
        "    for row in range(ignite_row-1, ignite_row+1):\n",
        "        for col in range(ignite_col-1,ignite_col+1):\n",
        "            forest[row][col] = 3\n",
        "    # forest[ignite_row-2:ignite_row+2][ignite_col-2:ignite_col+2] = 3\n",
        "    return forest.astype(int)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "N2HtHfB3LUO9"
      },
      "outputs": [],
      "source": [
        "def print_forest(forest):\n",
        "    for i in range(n_row):\n",
        "        for j in range(n_col):\n",
        "            sys.stdout.write(str(forest[i][j]))\n",
        "        sys.stdout.write(\"\\n\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "s-uCFGqsLVjb"
      },
      "outputs": [],
      "source": [
        "def tg(x):\n",
        "    return math.degrees(math.atan(x))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "lVf6qrhkLW8J"
      },
      "outputs": [],
      "source": [
        "def get_slope(altitude_matrix):\n",
        "    slope_matrix = [[0 for col in range(n_col)] for row in range(n_row)]\n",
        "    for row in range(n_row):\n",
        "        for col in range(n_col):\n",
        "            sub_slope_matrix = [[0,0,0],[0,0,0],[0,0,0]]\n",
        "            if row == 0 or row == n_row-1 or col == 0 or col == n_col-1:  # margin is flat\n",
        "                slope_matrix[row][col] = sub_slope_matrix\n",
        "                continue\n",
        "            current_altitude = altitude_matrix[row][col]\n",
        "            sub_slope_matrix[0][0] = tg((current_altitude - altitude_matrix[row-1][col-1])/1.414)\n",
        "            sub_slope_matrix[0][1] = tg(current_altitude - altitude_matrix[row-1][col])\n",
        "            sub_slope_matrix[0][2] = tg((current_altitude - altitude_matrix[row-1][col+1])/1.414)\n",
        "            sub_slope_matrix[1][0] = tg(current_altitude - altitude_matrix[row][col-1])\n",
        "            sub_slope_matrix[1][1] = 0\n",
        "            sub_slope_matrix[1][2] = tg(current_altitude - altitude_matrix[row][col+1])\n",
        "            sub_slope_matrix[2][0] = tg((current_altitude - altitude_matrix[row+1][col-1])/1.414)\n",
        "            sub_slope_matrix[2][1] = tg(current_altitude - altitude_matrix[row+1][col])\n",
        "            sub_slope_matrix[2][2] = tg((current_altitude - altitude_matrix[row+1][col+1])/1.414)\n",
        "            slope_matrix[row][col] = sub_slope_matrix\n",
        "    return slope_matrix"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "hvGQBxXiLbZ2"
      },
      "outputs": [],
      "source": [
        "def simulation(stage, per_bar_time, temp_bar_time, make_fig=False, forest_before_bar=None, whole_time=None, per_bar_input=None, temp_bar_input=None, max_per_len=None, max_temp_len=None):\n",
        "    \"\"\"\n",
        "    input:\n",
        "    stage = before bar:1, after bar:2\n",
        "    bar_time = when is the bar was set\n",
        "    bar_input = matrix of bar\n",
        "    max_per_len = the maxmimum length of the permanent bar\n",
        "    max_temp_len = the maxmimum length of the temporary bar\n",
        "\n",
        "    output:\n",
        "        stage1: the list of forest matrix before bar in time sequence\n",
        "        stage2: loss\n",
        "    \"\"\"\n",
        "    ###########################################################################\n",
        "    #init\n",
        "\n",
        "    #ignition = random_ignition(np.array(forest).shape[0],np.array(forest).shape[1]).astype(int)\n",
        "    ignition = centre_ignition(np.array(forest).shape[0], np.array(forest).shape[1]).astype(int)\n",
        "\n",
        "    #np.save('drive/MyDrive/CA/VAE/ignition/ignition_Brattain_'+str(index)+'.npy',ignition)\n",
        "\n",
        "    V = 5. # need to find the true wind data\n",
        "    p_h = 0.58\n",
        "    a = 0.078\n",
        "    c_1 = 0.045\n",
        "    c_2 = 0.131\n",
        "\n",
        "    ##############################################################################\n",
        "    def calc_pw(theta,c_1,c_2,V):\n",
        "        t = math.radians(theta)\n",
        "        ft = math.exp(V*c_2*(math.cos(t)-1))\n",
        "        return math.exp(c_1*V)*ft\n",
        "\n",
        "    def count_3_and_4(matrix): #counting burned area\n",
        "        count = 0\n",
        "        for row in matrix:\n",
        "            for element in row:\n",
        "                if element == 3 or element == 4:\n",
        "                    count += 1\n",
        "        return count\n",
        "\n",
        "    def get_wind():\n",
        "\n",
        "      #wind_matrix = [[0 for col in [0,1,2]] for row in [0,1,2]]\n",
        "\n",
        "      #thetas = [[0,180,180], #need to define the exact angle\n",
        "      #          [180,0,180],\n",
        "      #          [180,180,0]]\n",
        "\n",
        "      #thetas = [[45,0,45], #need to define the exact angle\n",
        "                #[90,0,90],\n",
        "                #[135,180,135]]\n",
        "\n",
        "      #for row in [0,1,2]:\n",
        "          #for col in [0,1,2]:\n",
        "              #wind_matrix[row][col] = calc_pw(thetas[row][col],c_1,c_2,V)\n",
        "      #wind_matrix[1][1] = 0\n",
        "        wind_matrix = [[1,0.5,0], #need to define the exact angle\n",
        "                  [0.5,0,0],\n",
        "                  [0,0,0]]\n",
        "        return wind_matrix\n",
        "\n",
        "    def burn_or_not_burn(abs_row, abs_col, neighbour_matrix, p_h,a): #removed p_bar = 0.1 from inputs\n",
        "        p_veg = vegetation_matrix[abs_row][abs_col]\n",
        "        p_den = {0:-0.4,1:0,2:0.3}[density_matrix[abs_row][abs_col]]\n",
        "        for row in [0,1,2]:\n",
        "            for col in [0,1,2]:\n",
        "                if neighbour_matrix[row][col] == 3: # we only care there is a neighbour that is burning\n",
        "                    # print(row,col)\n",
        "                    slope = slope_matrix[abs_row][abs_col][row][col]\n",
        "                    p_slope = math.exp(a * slope)\n",
        "                    p_wind = wind_matrix[row][col]\n",
        "                    p_burn = p_h * (0.5 + p_veg*10.) * (1 + p_den) * p_wind * p_slope\n",
        "                    if p_burn > random.random():\n",
        "                        return 3  #start burning\n",
        "        return 2 # not burning\n",
        "\n",
        "    def permanant_burn_or_not_burn(abs_row, abs_col, neighbour_matrix, p_h,a, p_bar=0.05): #determining if cells with barriers get burnt, assuming barriers have a burn probability of 0.05\n",
        "        p_veg = vegetation_matrix[abs_row][abs_col]\n",
        "        p_den = {0:-0.4,1:0,2:0.3}[density_matrix[abs_row][abs_col]]\n",
        "        for row in [0,1,2]:\n",
        "            for col in [0,1,2]:\n",
        "                if neighbour_matrix[row][col] == 3:\n",
        "                    slope = slope_matrix[abs_row][abs_col][row][col]\n",
        "                    p_slope = math.exp(a * slope)\n",
        "                    p_wind = wind_matrix[row][col]\n",
        "                    p_burn = p_h * (0.5 + p_veg*10.) * (1 + p_den) * p_wind * p_slope * p_bar\n",
        "                    if p_burn > random.random():\n",
        "                        return 3  #start burning\n",
        "        return 5 # not burning\n",
        "\n",
        "    def update_forest(old_forest):\n",
        "        result_forest = [[1 for i in range(n_col)] for j in range(n_row)]\n",
        "        for row in range(1, n_row-1):\n",
        "            for col in range(1, n_col-1):\n",
        "\n",
        "                if old_forest[row][col] == 1 or old_forest[row][col] == 4 or old_forest[row][col] == 6:\n",
        "                    result_forest[row][col] = old_forest[row][col]  # no fuel or burnt down or temporary bar\n",
        "\n",
        "                if old_forest[row][col] == 3:\n",
        "                    if random.random() < 0.4: #determining if cell is burnt or continues burning\n",
        "                        result_forest[row][col] = 3  # TODO need to change back here\n",
        "                    else:\n",
        "                        result_forest[row][col] = 4\n",
        "\n",
        "                if old_forest[row][col] == 2: #dealing with fuel cells\n",
        "                    neighbours = [[row_vec[col_vec] for col_vec in range(col-1, col+2)]\n",
        "                                    for row_vec in old_forest[row-1:row+2]]\n",
        "                    # print(neighbours)\n",
        "                    result_forest[row][col] = burn_or_not_burn(row, col, neighbours,p_h,a)\n",
        "\n",
        "                if old_forest[row][col] == 5: #dealing with barrier cells and if they burn or not\n",
        "                    neighbours = [[row_vec[col_vec] for col_vec in range(col-1, col+2)]\n",
        "                                    for row_vec in old_forest[row-1:row+2]]\n",
        "                    result_forest[row][col] = permanant_burn_or_not_burn(row, col, neighbours, p_h,a)\n",
        "\n",
        "        return result_forest\n",
        "\n",
        "    #check_bar_type\n",
        "    def check_temp_bar_input(forest, temp_bar_input, max_temp_len):\n",
        "        temp_count = 0\n",
        "        new_forest = forest\n",
        "\n",
        "        for row in temp_bar_input:\n",
        "            for element in row:\n",
        "                if element != 0 and element != 6:\n",
        "                    raise TypeError(\"The temp bar input is wrong, should be either 0 or 6.\")\n",
        "\n",
        "                #check_bar_length\n",
        "                if element == 6: #6 is temperorary barrier\n",
        "                    temp_count += 1\n",
        "\n",
        "        if  temp_count > max_temp_len:\n",
        "            raise TypeError(\"The max length of temp bar is exceeded.\")\n",
        "\n",
        "\n",
        "    def check_per_bar_input(forest, per_bar_input, max_per_len):\n",
        "        per_count = 0\n",
        "        new_forest = forest\n",
        "\n",
        "        for row in per_bar_input:\n",
        "            for element in row:\n",
        "                if element != 0 and element != 5 :\n",
        "                    raise TypeError(\"The per bar input is wrong, should be either 0 or 5.\")\n",
        "\n",
        "                #check_bar_length\n",
        "                if element == 5: #5 is permenant barrier\n",
        "                    per_count += 1\n",
        "\n",
        "        if per_count > max_per_len :\n",
        "            raise TypeError(\"The max length of per bar is exceed.\")\n",
        "\n",
        "        #check_permanent_dist, if the fire is burning within a 10x10 square of each of the barrier cells then barrier is too close, if barrier outside of 30x30 square then too far\n",
        "        for row in range(5, n_row-5):\n",
        "            for col in range(5, n_col-5):\n",
        "                if per_bar_input[row][col] == 5:\n",
        "                  neighbours_close = [[row_vec[col_vec] for col_vec in range(col-2, col+3)]\n",
        "                            for row_vec in new_forest[row-2:row+3]]\n",
        "                  neighbours_far = [[row_vec[col_vec] for col_vec in range(col-20, col+21)]\n",
        "                            for row_vec in new_forest[row-20:row+21]]\n",
        "\n",
        "                  #if too close\n",
        "                  #if any(3 in row for row in neighbours_close):\n",
        "                  #  raise TypeError(\"The permenant bar is too close to the fire front.\")\n",
        "\n",
        "                  #if too far\n",
        "                  #if any(3 in row for row in neighbours_far) == False:\n",
        "                  #  raise TypeError(\"The permenant bar is too far from the fire front.\")\n",
        "\n",
        "\n",
        "\n",
        "    ###########################################################\n",
        "    # custormize colorbar\n",
        "\n",
        "    cmap = mpl.colors.ListedColormap(['orange', 'yellow', 'green', 'red', 'black', 'white', 'blue'])\n",
        "    cmap.set_over('0.25')\n",
        "    cmap.set_under('0.75')\n",
        "    bounds = [1.0, 2.02, 2.27, 3.01, 3.5, 5.1, 5.9, 6.9]\n",
        "    norm = mpl.colors.BoundaryNorm(bounds, cmap.N)\n",
        "\n",
        "    ############################################################\n",
        "    #init\n",
        "    fields_1_sim = np.zeros((1,100))\n",
        "\n",
        "    vegetation_matrix = np.round(forest,3)\n",
        "\n",
        "    density_matrix = np.round(density, 3).tolist()\n",
        "\n",
        "    altitude_matrix = np.round(altitude,3).tolist()\n",
        "\n",
        "    wind_matrix = get_wind()\n",
        "\n",
        "    new_forest = ignition.tolist()\n",
        "\n",
        "\n",
        "    slope_matrix = get_slope(altitude_matrix)\n",
        "\n",
        "    ############################################################\n",
        "    #the fire progress before set the bar\n",
        "    if stage == 1:\n",
        "        #############################################################################\n",
        "        #init\n",
        "        stage_1_forest_list = [np.array(new_forest)]\n",
        "\n",
        "        #############################################################################\n",
        "        #begin to loop\n",
        "        bar_time = min(temp_bar_time, per_bar_time)\n",
        "\n",
        "        for day in range(bar_time+1):\n",
        "            #print(f'time step: {day}')\n",
        "            new_forest = copy.deepcopy(update_forest(new_forest))\n",
        "            forest_array = np.array(new_forest)\n",
        "            stage_1_forest_list.append(forest_array)\n",
        "\n",
        "            if day>0 and day%1 == 0 and day <= bar_time and make_fig:\n",
        "\n",
        "                #np.save('drive/MyDrive/CA/VAE/ignition_Brattain_'+str(index)+'_'+str(i)+'_'+'.npy',forest_array)\n",
        "                #np.save('drive/MyDrive/CA/VAE/ignition_Chimney_'+str(index)+'_'+str(i)+'_'+'.npy',forest_array)\n",
        "                #np.save('drive/MyDrive/CA/Field/JChimney_'+str(index)+'_'+str(i)+'_'+'.npy',forest_array)\n",
        "\n",
        "                plt.imshow(forest + forest_array,  cmap = cmap, norm = norm, interpolation=\"none\" )\n",
        "                plt.axis('off')\n",
        "                plt.title(f'temp:{temp_bar_time}, per:{per_bar_time}, time step: {day}')\n",
        "\n",
        "                # Create the directory if it doesn't exist, not saving fig\n",
        "                #if not os.path.exists(directory):\n",
        "                #    os.makedirs(directory)\n",
        "                # Save the image with the desired file path\n",
        "                #plt.savefig(directory + 'fire_' + str(day).zfill(3) + '.png', format='png', bbox_inches='tight')\n",
        "\n",
        "                plt.show()\n",
        "                plt.close()\n",
        "                print('burning',np.sum(forest_array==3))\n",
        "            plt.show()\n",
        "            plt.close()\n",
        "        return forest_array.astype(int), altitude_matrix, wind_matrix\n",
        "\n",
        "    ############################################################\n",
        "    #the fire progress after set the bar\n",
        "    elif stage == 2:\n",
        "        ############################################################################\n",
        "        #init\n",
        "        new_forest = copy.deepcopy(forest_before_bar)\n",
        "        loss = count_3_and_4(new_forest)\n",
        "        stage_2_forest_list = [np.array(new_forest)]\n",
        "\n",
        "\n",
        "        #check overlap\n",
        "        all_bar = per_bar_input + temp_bar_input\n",
        "        if 11 in all_bar:\n",
        "            raise TypeError(\"Two bar is overlaped\")\n",
        "\n",
        "        ############################################################################\n",
        "        #update forest\n",
        "        for day in range(min(temp_bar_time, per_bar_time), whole_time+1):\n",
        "            #print(f'time step: {day}')\n",
        "\n",
        "            if day == temp_bar_time:\n",
        "                #check input\n",
        "                check_temp_bar_input(new_forest, temp_bar_input, max_temp_len)\n",
        "                forest_before_temp_bar =  copy.deepcopy(new_forest)\n",
        "                #insert bar\n",
        "                for i in range(n_row):\n",
        "                    for j in range(n_col):\n",
        "                        if temp_bar_input[i][j] != 0:\n",
        "                            new_forest[i][j] = temp_bar_input[i][j]\n",
        "\n",
        "            if day == per_bar_time:\n",
        "                #check input\n",
        "                check_per_bar_input(new_forest, per_bar_input, max_per_len)\n",
        "                #insert bar\n",
        "                for i in range(n_row):\n",
        "                    for j in range(n_col):\n",
        "                        if per_bar_input[i][j] != 0:\n",
        "                            new_forest[i][j] = per_bar_input[i][j]\n",
        "\n",
        "            if day == temp_bar_time + 4:\n",
        "                for row in range(128):\n",
        "                    for col in range(128):\n",
        "                        if new_forest[row][col] == 6:\n",
        "                            new_forest[row][col] = forest_before_temp_bar[row][col]\n",
        "\n",
        "            new_forest = copy.deepcopy(update_forest(new_forest))\n",
        "            forest_array = np.array(new_forest)\n",
        "            stage_2_forest_list.append(forest_array)\n",
        "\n",
        "            if day>0 and day%1 == 0 and make_fig:\n",
        "\n",
        "                #np.save('drive/MyDrive/CA/VAE/ignition_Brattain_'+str(index)+'_'+str(i)+'_'+'.npy',forest_array)\n",
        "                #np.save('drive/MyDrive/CA/VAE/ignition_Chimney_'+str(index)+'_'+str(i)+'_'+'.npy',forest_array)\n",
        "                #np.save('drive/MyDrive/CA/Field/JChimney_'+str(index)+'_'+str(i)+'_'+'.npy',forest_array)\n",
        "\n",
        "                plt.imshow(forest + forest_array,  cmap = cmap, norm = norm, interpolation=\"none\" )\n",
        "                plt.axis('off')\n",
        "                plt.title(f'temp:{temp_bar_time}, per:{per_bar_time}, time step: {day}')\n",
        "\n",
        "                #plt.savefig(directory + 'fire_' + str(day).zfill(3) +'.png', format='png',bbox_inches='tight')\n",
        "\n",
        "                plt.show()\n",
        "                plt.close()\n",
        "                print('burning',np.sum(forest_array==3))\n",
        "\n",
        "            plt.show()\n",
        "            plt.close()\n",
        "\n",
        "        burnt_area = np.sum(forest_array == 4) + np.sum(forest_array == 3)\n",
        "        loss = count_3_and_4(new_forest) - loss\n",
        "        return forest_array.astype(int), burnt_area, altitude_matrix, wind_matrix\n",
        "\n",
        "    else:\n",
        "        raise TypeError('The stage should be either 1 or 2')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CK8XuPxCJCns"
      },
      "source": [
        "## Running the Simulation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Gq4v4OXVJBDx",
        "outputId": "37843d75-3b4c-4eff-c375-051237b18365"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "burning 12\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "burning 9\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "burning 13\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAGbCAYAAAAr/4yjAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAvbUlEQVR4nO3deZBVxfnw8WeYoQYYEFHUkU0QAVHGJZiiUi6gRk1CASaioq8Gl7hEUFOpmNKoBRjiUolEoxKjRpMAasQl/qNBTYimgpZappSUIWIJxrJcIOLKSFj6/cPfdO5l7uGc7vP06XMv30+VVc7l3j7rTN9+ztNPNxljjAAAICI9Yu8AAKA86BQAABadAgDAolMAAFh0CgAAi04BAGDRKQAALDoFAIBFpwAAsOgUgECamppk7ty5sXcDcEKnoGjFihUyd+5c+fDDD2PvirfOzk4599xzZdy4cdK/f3/p27evHHzwwXLzzTfL5s2bY+9eLnfeeadMnDhR9tprL2ltbZURI0bI2WefLWvXrvVu87HHHmuoP/zXXnut/OEPf4i9G9088sgjcsIJJ8igQYOktbVVhgwZItOnT5d//OMfsXet4TRR+0jPz372M7nssstkzZo1Mnz48Ni74+WDDz6Qb3zjG3LUUUfJ8OHDpUePHrJixQpZvHixzJgxQ+69997Yu+jtoosuko0bN0pHR4cMGDBA1qxZI3feeads3bpVXn75ZRk0aJBzm7Nnz5bbbrtNav0aff7559LS0iItLS0au1+Ivn37yvTp0+U3v/lN7F2pcs0118irr74qhx56qAwcOFDeffddufvuu+Wdd96RZ599Vg4++ODYu9g4DNT89Kc/NSJi1qxZE3tX1M2ePduIiHnnnXdi70qizs5Os3XrVqfPvPjii0ZEzHXXXee1zVmzZplG+jVqa2szM2fOjL0bmbz77rumpaXFXHDBBbF3paEQPlIyd+5cueyyy0REZMSIEdLU1CRNTU1VoYnFixfL+PHjpXfv3rLbbrvJjBkz5K233qpqZ9KkSTJu3Dh55ZVXZOLEidKnTx/Zb7/95MEHHxQRkaefflomTJggvXv3ljFjxshTTz3VbT+amppk1apVcsopp8guu+wiu+++u1x66aXy+eefV713/fr1smrVKtm4cWPq8XWNfHxDY01NTTJ79mxZsmSJjBkzRnr16iXjx4+XZ555ptt73377bTnnnHNsmOfAAw+Uu+++u+o9f/nLX6SpqUnuv/9+ueqqq2Tw4MHSp08f+fjjj2Xz5s2yatUqeeedd4Ie11lnnSW33XabPb6u/yqPuTK01HVtXnvtNTnjjDOkf//+sscee8jVV18txhh56623ZNq0abLLLrtIe3u73Hjjjd22uWnTJpkzZ47st99+0traKkOHDpUf/vCHsmnTptT9Xb16tZx00knS3t4uvXr1kiFDhsiMGTPko48+svv72WefyW9/+1t7LGeddZb9vMt1+f3vfy8/+tGPpL29Xdra2mTq1Knd7vWNGzfKqlWrZP369an7Xsuee+4pffr0qetwbSnF7pUaxcsvv2xOO+00IyLm5z//uVm0aJFZtGiR+fTTT40xxsyfP980NTWZU0891SxcuNDMmzfPDBw40AwfPtxs2LDBtjNx4kQzaNAgM3ToUHPZZZeZW265xRxwwAGmubnZ3H///aa9vd3MnTvX3HTTTWbw4MGmf//+5uOPP7afnzNnjhER09HRYaZMmWJuvfVWc8YZZxgRMWeeeWbVPne9d/ny5d2OZ9OmTWbdunXm3//+t3n44YdNe3u72WeffczmzZu9zo+ImHHjxpmBAweaa665xtxwww1mn332Mb179zYrV66073v33XfNkCFDzNChQ80111xjfvnLX5qpU6fa89pl+fLlRkTMAQccYA455BCzYMECc91115nPPvvMrFmzxohI4jfe9evXm/fee8+88MILZsqUKUZEzBNPPOF8TCtWrDDHHXecERF7vRctWlR1zHPmzLE/d53vQw45xJx22mlm4cKFZvLkyUZEzIIFC8yYMWPMd7/7XbNw4UJz+OGHGxExTz/9tP381q1bzfHHH2/69Oljvve975lf/epXZvbs2aalpcVMmzZth/u6adMmM2LECDNo0CAzf/58c9ddd5l58+aZL3/5y2bt2rXGGGMWLVpkWltbzZFHHmmPZcWKFcYY9+vS0dFhDjroILNgwQJz+eWXm169epnRo0ebjRs3dntv5TlKs2HDBvP++++bV155xZxzzjlGRMwdd9yR+fNIR6egKCl8tHbtWtPc3Gx+8pOfVL2+cuVK09LSUvX6xIkTjYiYe++91762atUqIyKmR48e5rnnnrOvL1u2zIiIueeee+xrXX94pk6dWrWtiy66yIiIefnll7u9t1ancN999xkRsf8ddthh5pVXXnE5HVW62nnxxRfta2+++abp1auX+eY3v2lfO/fcc83ee+9t1q9fX/X5GTNmmP79+9s/Kl1/UPbdd9+qPzTGmNROobW11e7P7rvvbn7xi194H9eOwkdJncL5559vX9uyZYsZMmSIaWpqMtdff719fcOGDaZ3795Vx7Bo0SLTo0cP89e//rVqO7fffrsREfO3v/0tcT///ve/GxExS5cu3eHxJIWPXK/L4MGDq76sPPDAA0ZEzM0332xf8+kUxowZY69d3759zVVXXeUcMsSOET4qwMMPPyzbtm2TU045RdavX2//a29vl1GjRsny5cur3t+3b1+ZMWOG/XnMmDGy6667ytixY2XChAn29a7/f+ONN7ptc9asWVU/X3zxxSLyRbZMl7lz54oxRiZNmtTt80cffbQ8+eSTsnTpUrnwwgulZ8+e8tlnn7kffIWvfOUrMn78ePvzsGHDZNq0abJs2TLZunWrGGPkoYcekilTpogxpupcnXDCCfLRRx/JSy+9VNXmzJkzpXfv3lWvDR8+XIwxiQ9LH3/8cXnsscfkxhtvlGHDhuU+Llff+c537P83NzfLYYcdJsYYOffcc+3ru+66q4wZM6bq2i5dulTGjh0r+++/f9W5OeaYY0REut1Hlfr37y8iIsuWLcsULqzkc12+/e1vS79+/ezP06dPl7333rvq/ps0aZIYY5yyt+655x754x//KAsXLpSxY8dKZ2enbN261el4sGP1kxZRx1avXi3GGBk1alTNf+/Zs2fVz0OGDKmKTYt88Us9dOjQbq+JiGzYsKFbm9tva+TIkdKjR4/M6Zd77bWX7LXXXiLyxS/0tddeK8cdd5ysXr1a2tvbM7WRtk8iIqNHj5aNGzfKunXrpEePHvLhhx/KHXfcIXfccUfNNt5///2qn0eMGOG8H0cffbSIiHz961+XadOmybhx46Rv374ye/Zs57Z8DBs2rOrn/v37S69evWTgwIHdXv/Pf/5jf169erX885//lD322KNmu9ufm0ojRoyQ73//+7JgwQJZsmSJHHnkkTJ16lT7bGNH1q1b53xdtr/WTU1Nst9+++VK/xX54otFlxkzZsjYsWNF5IvMP+igUyjAtm3bpKmpSR5//HFpbm7u9u99+/at+rnWe3b0usmQVbx9J+Nq+vTpcuWVV8qjjz4qF1xwQa62kmzbtk1ERM444wyZOXNmzfccdNBBVT9vP0pwNXLkSDn00ENlyZIlhXUKta5jlmu7bds26ejokAULFtR87/ZfGrZ34403yllnnSWPPvqoPPHEE3LJJZfIddddJ88995wMGTIk8XM+16UIAwYMkGOOOUaWLFlCp6CITkFR0h/ekSNHijFGRowYIaNHjy5kX1avXl31Lfr111+Xbdu2ec+f6OzsFBGxmSq++7S91157Tfr06WO//fbr10+2bt0qX/3qV72346qzszNT9k4teTtbFyNHjpSXX35Zjj32WO/tdnR0SEdHh1x11VWyYsUKOfzww+X222+X+fPni0jt49ljjz2cr8v219oYI6+//rp659HZ2ZnrnkR3PFNQ1NbWJiLd0xu/9a1vSXNzs8ybN6/bt3pjTFWIQEtXqmSXW265RUS+CJl0qZWSun79+pojj7vuuktERA477DDvfXr22WerYs9vvfWWPProo3L88cdLc3OzNDc3y0knnSQPPfRQzZmq69aty7SdWimpW7ZsqRlme/7552XlypXex5V0zUM45ZRT5O2335Y777yz2791dnbu8NnIxx9/LFu2bKl6raOjQ3r06FHVIba1tXU7Fp/r8rvf/U4++eQT+/ODDz4o77zzTtX955KSWis0tnbtWvnTn/6U655Ed4wUFHU9RL3yyitlxowZ0rNnT5kyZYqMHDlS5s+fL1dccYWsXbtWTjzxROnXr5+sWbNGHnnkETn//PPlBz/4geq+rFmzRqZOnSpf+9rX5Nlnn5XFixfL6aefXjXz89Zbb5V58+bJ8uXL7cPmxYsXy+233y4nnnii7LvvvvLJJ5/IsmXL5Mknn5QpU6bYh5oiX/xSjhgxQmbOnJlpBuy4cePkhBNOkEsuuURaW1tl4cKFIiIyb948+57rr79eli9fLhMmTJDzzjtPDjjgAPnggw/kpZdekqeeeko++OCD1O28/fbbMnbs2Kr9+vTTT2Xo0KFy6qmnyoEHHihtbW2ycuVKueeee6R///5y9dVXV7UxadIkefrpp1NDc13X/JJLLpETTjhBmpubq5IENJ155pnywAMPyIUXXijLly+Xww8/XLZu3SqrVq2SBx54QJYtW5b4B/LPf/6zzJ49W04++WQZPXq0bNmyRRYtWmT/4Fcez1NPPSULFiyQQYMGyYgRI2TChAnO12W33XaTI444Qs4++2x577335KabbpL99ttPzjvvPPue559/Xo4++miZM2dO6sPmjo4OOfbYY+WQQw6RAQMGyOrVq+XXv/61bN68Wa6//nr/k4ruCs93anA//vGPzeDBg02PHj26pac+9NBD5ogjjjBtbW2mra3N7L///mbWrFnmX//6l33PxIkTzYEHHtit3X322cdMnjy52+siYmbNmmV/7kp7fPXVV8306dNNv379zIABA8zs2bNNZ2dn1WdrpaS+8MIL5uSTTzbDhg0zra2tpq2tzXzpS18yCxYs6DZHYeXKlUZEzOWXX556Xrr2c/HixWbUqFGmtbXVHHrooTXTYd977z0za9YsM3ToUNOzZ0/T3t5ujj322Kp89K50xloplrVSUjdt2mQuvfRSc9BBB5lddtnF9OzZ0+yzzz7m3HPPrTkDffz48aa9vT31uLZs2WIuvvhis8cee5impqaq9FRJSEldt25dVRszZ840bW1t3dqudS/897//NTfccIM58MADTWtrqxkwYIAZP368mTdvnvnoo48S9/ONN94w55xzjhk5cqTp1auX2W233czRRx9tnnrqqar3rVq1yhx11FGmd+/e3c6hy3W57777zBVXXGH23HNP07t3bzN58mTz5ptvVm3LJSV1zpw55rDDDjMDBgwwLS0tZtCgQWbGjBm50qRRG51Cg0n6wxPCbbfdZtra2sy7776b+t7tO68y+/jjj01LS4u59dZbY+9K3dlRZ436wDMFeFu+fLlccsklNnW1UTzzzDMyePDgqlAHsLPgmQK8LV26NPYuBDF58mSZPHly7N0AomCkAACwWE8BAGAxUgAAWHQKAAAr+4Pme4ubzg8ACOD09KcFjBQAABadAgDA8puncPr//rfpf2VrxMzJuTfbtZfEaTv3Vvz/6RleT5HpeO9NeN1hO7nE3n6apP2rlHCPadO4Z+uO571fmCz3R1EUzo/z3wzta+J4PhkpAAAsOgUAgJV98lpl9pF2uCXh/S60wgBp+5u0fztlGEKDYyipknZYSfv+LO09UfbwYqWiQkl5jt0h9KMdbs+kav/IPgIAOKBTAABYpQsfZWknTcgwlet2vJUpQyTHvnhff8cQBxlK/yfPfdP12dj3W5KQoaR6O+bTa/x7UlboqMr3ED4CADigUwAAWF7ho6bV/3s5bWgdOlunVvuubWfZR43t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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "burning 12\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "burning 16\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "burning 18\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "burning 19\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "burning 23\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "burning 25\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "burning 29\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "burning 32\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "burning 33\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "burning 35\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "burning 41\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "burning 41\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "burning 36\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "burning 48\n"
          ]
        }
      ],
      "source": [
        "#for now consider only permenant barriers\n",
        "\n",
        "#obtaining a permenant barrier matrix, for a 10x3 permenant barrier\n",
        "def fire_break(forest, x_pos, y_pos):\n",
        "  fire_break = np.zeros(np.shape(forest))\n",
        "  x = x_pos # x position of centre of fire break\n",
        "  y = y_pos\n",
        "  for i in range(x-1,x+2):\n",
        "    for j in range(y-5,y+5):\n",
        "      fire_break[i,j] = 5\n",
        "  return fire_break\n",
        "\n",
        "#to ignore temporary barrier just create a zeros matrix\n",
        "temp_firebreak = np.zeros(np.shape(forest))\n",
        "\n",
        "#starting with a permenant barrrier in the centre\n",
        "per_firebreak = fire_break(forest, 55, 55)\n",
        "\n",
        "#simulating the wildfire\n",
        "current_forest, alt, wind = simulation(1, 3, 3, True)\n",
        "forest_history2, alt, wind, burnt_area = simulation(2, 3, 3, True, current_forest, 16, per_firebreak, temp_firebreak, 30, 0)\n",
        "#print(\"loss: \", loss)\n",
        "#print(\"Burnt area: \", burnt_area)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qYLVmcO3yu7i"
      },
      "source": [
        "## Creating DQN\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 87,
      "metadata": {
        "id": "K4uvkKG71rRk",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d214c040-8491-4140-f2f8-d810d7304233"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/MyDrive/ML/Emp Forests\n"
          ]
        }
      ],
      "source": [
        "#Model, input is the 128x128 image of the forest fire.\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "import random\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Activation, Input, Conv2D, MaxPooling2D, Flatten, Reshape\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.metrics import mean_squared_error\n",
        "import os\n",
        "import cv2\n",
        "import shutil\n",
        "import gc\n",
        "print(os.getcwd())\n",
        "bar_directory = r'/content/drive/MyDrive/ML/Bar Forests' #changing directory within google drive\n",
        "emp_directory = r'/content/drive/MyDrive/ML/Emp Forests'\n",
        "buffer_directory = r'/content/drive/MyDrive/ML/Buffer Forests'\n",
        "filename = r\"bar_input_forest index\"\n",
        "emp_filename = r\"emp_input_forest index\"\n",
        "\n",
        "class DQN():\n",
        "  def __init__(self, action_size, input_shape, summary = False): #assuming input has dimension (24,24,1)\n",
        "\n",
        "    \"\"\"\n",
        "  forest (array) - forest array up to point at which fire breaks should be placed\n",
        "  define some parameters and hyperparameters:\n",
        "         \"lr\" : learning rate\n",
        "         \"gamma\": discounted factor\n",
        "         \"exploration_proba_decay\": decay of the exploration probability\n",
        "         \"batch_size\": size of experiences we sample to train the DNN\n",
        "    \"\"\"\n",
        "    self.input_row = input_shape[0]\n",
        "    self.input_col = input_shape[1]\n",
        "\n",
        "    #now forming DNN\n",
        "    self._lr = 0.00028\n",
        "    self._gamma = 0.99\n",
        "    self._exploration_prob_decay = 0.035\n",
        "    self._exploration_prob = 1\n",
        "    self._batch_size = 42\n",
        "\n",
        "    #now creating a memory buffer\n",
        "    self.memory_buffer = []\n",
        "    self.max_memory_buffer = 500\n",
        "\n",
        "    #Now the DQN network\n",
        "    self.model = Sequential()\n",
        "    self.model.add(Conv2D(filters = 4, kernel_size = (3, 3), activation='relu',\n",
        "    padding='same', input_shape = (self.input_row,self.input_col,4), data_format = \"channels_last\"))\n",
        "    self.model.add(MaxPooling2D(pool_size = (2, 2), padding='same', input_shape = (16,16,4)))\n",
        "    self.model.add(Flatten())\n",
        "    #print(self.model.output_shape)\n",
        "    self.model.add(Dense(units = 128, activation = 'relu', input_shape = (1024,)))\n",
        "    self.model.add(Dense(units = 64, activation = 'relu'))\n",
        "    self.model.add(Dense(units = 32, activation = 'relu'))\n",
        "    self.model.add(Dense(units = 2, activation = 'relu'))\n",
        "    self.model.add(Dense(units = action_size, activation = 'linear'))\n",
        "\n",
        "\n",
        "    self.model.compile(loss=\"mse\",\n",
        "                      optimizer = Adam(learning_rate = self._lr))\n",
        "    if summary == True:\n",
        "      self.model.summary()\n",
        "\n",
        "  def burning_cells(self, forest, wind):\n",
        "    \"\"\" This method is used to find the position of all of the burning cells for\n",
        "    a given forest state\n",
        "    forest (array) - forest state in question \"\"\"\n",
        "    self._burning_cells = []\n",
        "    self._neighbour_coord = []\n",
        "    self.burning_matrix = np.zeros(np.shape(forest))\n",
        "    self.wind_matrix = np.zeros(np.shape(forest))\n",
        "    self._too_close = []\n",
        "    n_row = forest.shape[0]\n",
        "    n_col = forest.shape[1]\n",
        "    #getting the burning cells\n",
        "    for row in range(1, n_row - 1):\n",
        "      for col in range(1, n_col - 1):\n",
        "        if forest[row][col] == 3:\n",
        "          self._burning_cells.append((row, col))\n",
        "          self.burning_matrix[row][col] == 1 #creating a matrix of 0s with 1s where the forest is burning\n",
        "          for i in range(3):\n",
        "            for j in range(3):\n",
        "              self.wind_matrix[row+i][col+j] = wind[i][j]\n",
        "\n",
        "          #creating a grid of cells that are too close to burning cells (within a 5x5 grid of burning cells)\n",
        "          for  neighbour_col in range(col - 2, col + 3):\n",
        "            for neighbour_row in range(row - 2, row + 3):\n",
        "              if (neighbour_row, neighbour_col) not in self._too_close:\n",
        "               self._too_close.append((neighbour_row, neighbour_col))\n",
        "\n",
        "          #getting the neighbours of burning cells to get a neighbours matrix (all neighbours will be the 'agents')\n",
        "          for neighbour_col in range(col-5, col+6):\n",
        "            for neighbour_row in range(row - 5, row + 6):  #looking at 10x10 grid around each burning cell to get neighbour cells\n",
        "              if (neighbour_row, neighbour_col) not in self._neighbour_coord\\\n",
        "              and (neighbour_row, neighbour_col) not in self._too_close\\\n",
        "              and forest[neighbour_row][neighbour_col] != 3\\\n",
        "              and forest[neighbour_row][neighbour_col] !=4: #so we only upload new cells and cells that aren't burning, burnt, and far enough away from the burning cells to the neighbour coord and matrix\n",
        "                self._neighbour_coord.append((neighbour_row, neighbour_col))\n",
        "\n",
        "\n",
        "  def choose_actions(self, forest, alt, wind, length_of_barrier):\n",
        "    \"\"\"\n",
        "    forest (array) - forest array up to point at which fire breaks should be placed\n",
        "    length_of_barrier (int) - number of cells that can be firebreaks\n",
        "\n",
        "    \"\"\"\n",
        "    self.input_forest = np.zeros((1, self.input_row, self.input_col, 4)).astype(int) # 4 because there are 4 channels: input forest, altitude, wind, and burning cells\n",
        "    self.bar_cells = []\n",
        "    self.bar_Q_val = []\n",
        "    self.bar_input_states = []\n",
        "    self.emp_cells = []\n",
        "    self.emp_Q_val = []\n",
        "    self.emp_input_states = []\n",
        "    self.length_of_barrier = length_of_barrier\n",
        "    #randomly shufffle the neighbour cells\n",
        "    np.random.shuffle(self._neighbour_coord)\n",
        "    for cell in self._neighbour_coord:\n",
        "      if random.random() <= self._exploration_prob: ##choosing a random action or not depending on episilon greedy function\n",
        "        #need to obtain q val for later updates, so need to define the input forest\n",
        "        x,y = cell\n",
        "        #obtain input matrix\n",
        "        for i in range(-8, 8):\n",
        "          for j in range(-8, 8):\n",
        "            if x+i > 128 or y+j > 128 or x+i < 0 or y+j < 0: #for when index is out of bounds\n",
        "              self.input_forest[0][i][j][0] = 1 #as this is 'no fuel' cell\n",
        "              self.input_forest[0][i][j][1] = 0 #as there should be 0 altitude\n",
        "              self.input_forest[0][i][j][2] = 0 #as there is 0 wind effects\n",
        "              self.input_forest[0][i][j][3] = 0 #as there are no burning cells out of bounds\n",
        "\n",
        "\n",
        "            else:\n",
        "              self.input_forest[0][i][j][0] = forest[i+x][j+y]/5 # / to normalise\n",
        "              self.input_forest[0][i][j][1] = alt[i+x][j+y]/np.max(alt)\n",
        "              self.input_forest[0][i][j][2] = self.wind_matrix[i+x][j+y]/np.max(wind)\n",
        "              self.input_forest[0][i][j][3] = self.burning_matrix[i+x][j+y]\n",
        "        q_vals = self.model.predict(self.input_forest, verbose = 0) #divide self.input forest by 5 in order to normalise input image\n",
        "        if random.choice([0,1]) == 0: #action 0 corresponds with cell being a firebreak\n",
        "          if len(self.bar_cells) == self.length_of_barrier:\n",
        "            #if max number of barrier cells already reached, just replace a random one. So choose a random index\n",
        "            index = random.randint(0,29)\n",
        "            #move the cells with lower barrier q val to the none barrier lists\n",
        "            self.emp_Q_val.append(self.bar_Q_val[index])\n",
        "            self.emp_cells.append(self.bar_cells[index])\n",
        "            #self.emp_input_states.append(self.bar_input_states[index])\n",
        "            shutil.move(bar_directory+\"/\"+self.bar_input_states[index], emp_directory+\"/\"+\n",
        "                        emp_filename.replace(\"index\", str(len(self.emp_input_states)))+\".npy\") #moving image into empty cell folder\n",
        "            self.emp_input_states.append(self.bar_input_states[index].replace(\"bar_input_forest\"+\" \"+str(index),\n",
        "                                                                              \"emp_input_forest\"+\" \"+str(len(self.emp_input_states))))\n",
        "            #update the barrier lists with the new cell\n",
        "            os.chdir(bar_directory)\n",
        "            np.save(filename.replace(\"index\", str(index))+ \".npy\", np.reshape(self.input_forest, (1,16,16,4))) #save image to filename in bar_directory\n",
        "            self.bar_Q_val[index] = q_vals\n",
        "            self.bar_cells[index] = cell\n",
        "            self.bar_input_states[index] = filename.replace(\"index\", str(index))+\".npy\"\n",
        "\n",
        "          #if max number of barrier cells is not reached yet\n",
        "          elif len(self.bar_Q_val) < self.length_of_barrier: #getting barrier of cells of the correct size\n",
        "            os.chdir(bar_directory)\n",
        "            np.save(filename.replace(\"index\", str(len(self.bar_input_states)))\n",
        "            + \".npy\", np.reshape(self.input_forest, (1,16,16,4))) #save image to filename in bar_directory\n",
        "            self.bar_input_states.append(filename.replace(\"index\", str(len(self.bar_input_states)))+\".npy\")\n",
        "            #self.bar_input_states.append(self.input_forest)\n",
        "            self.bar_Q_val.append(q_vals)\n",
        "            self.bar_cells.append(cell)\n",
        "\n",
        "\n",
        "        else: #if choice is to make the cell a empty cell\n",
        "          os.chdir(emp_directory)\n",
        "          self.emp_Q_val.append(q_vals)\n",
        "          self.emp_cells.append(cell)\n",
        "          np.save(emp_filename.replace(\"index\", str(len(self.emp_input_states)))+\".npy\",\n",
        "                      np.reshape(self.input_forest, (1,16,16,4))) #save image to filename in bar_directory\n",
        "          self.emp_input_states.append(emp_filename.replace(\"index\", str(len(self.emp_input_states)))+\".npy\")\n",
        "\n",
        "      #now for case where action is not random\n",
        "      else:\n",
        "        x,y = cell\n",
        "        #obtain input matrix\n",
        "        for i in range(-8, 8):\n",
        "          for j in range(-8, 8):\n",
        "            if x+i > 128 or y+j > 128 or x+i < 0 or y+j < 0:\n",
        "              self.input_forest[0][i][j] = 1 #as this is 'no fuel' cell\n",
        "\n",
        "            else:\n",
        "              self.input_forest[0][i][j] = forest[i+x][j+y]\n",
        "        q_vals = self.model.predict(self.input_forest/5, verbose = 0) #divide self.input forest by 5 in order to normalise input image\n",
        "        if q_vals[0][0] > q_vals[0][1]: #i.e. if it is better for the cell to be a fire break than empty\n",
        "\n",
        "          if len(self.bar_cells) == self.length_of_barrier:\n",
        "            if q_vals[0][0] > np.min(np.array(self.bar_Q_val)[:,0,0]):\n",
        "              index = np.argmin(np.array(self.bar_Q_val)[:,0,0])\n",
        "              #move the cells with lower barrier q val to the none barrier lists\n",
        "              self.emp_Q_val.append(self.bar_Q_val[index])\n",
        "              self.emp_cells.append(self.bar_cells[index])\n",
        "              shutil.move(bar_directory+\"/\"+filename.replace(\"index\", str(index))+\".npy\", emp_directory+\n",
        "                          emp_filename.replace(\"index\", str(len(self.emp_input_states))))\n",
        "              self.emp_input_states.append(self.bar_input_states[index].replace(\"bar_input_forest\"+\" \"+str(index),\n",
        "                                                          \"emp_input_forest\"+\" \"+str(len(self.emp_input_states))))\n",
        "              #self.emp_input_states.append(self.bar_input_states[index])\n",
        "              #update the barrier lists with the new cell\n",
        "              self.bar_Q_val[index] = q_vals\n",
        "              self.bar_cells[index] = cell\n",
        "              #self.bar_input_states[index] = self.input_forest\n",
        "              self.bar_input_states[index] = filename.replace(\"index\", str(index))+\".npy\"\n",
        "              os.chdir(bar_directory)\n",
        "              np.save(filename.replace(\"index\", str(index))+\".npy\", np.reshape(self.input_forest, (1,16,16,4))) #save image to filename in bar_directory\n",
        "\n",
        "            else: #if q val is not greater than current barrier q vals\n",
        "              self.emp_Q_val.append(q_vals)\n",
        "              self.emp_cells.append(cell)\n",
        "              #self.emp_input_states.append(self.input_forest)\n",
        "              os.chdir(emp_directory)\n",
        "              np.save(emp_filename.replace(\"index\", str(len(self.emp_input_states)))+\".npy\",\n",
        "                          np.reshape(self.input_forest, (1,16,16,4))) #save image to filename in bar_directory\n",
        "              self.emp_input_states.append(emp_filename.replace(\"index\", str(len(self.emp_input_states)))+\".npy\")\n",
        "\n",
        "\n",
        "          elif len(self.bar_Q_val) < self.length_of_barrier: #getting barrier of cells of the correct size\n",
        "            self.bar_Q_val.append(q_vals)\n",
        "            self.bar_cells.append(cell)\n",
        "            #self.bar_input_states.append(self.input_forest)\n",
        "            os.chdir(bar_directory)\n",
        "            np.save(filename.replace(\"index\", str(len(self.bar_input_states)))+\".npy\",\n",
        "                                     np.reshape(self.input_forest, (1,16,16,4))) #save image to filename in bar_directory\n",
        "            self.bar_input_states.append(filename.replace(\"index\", str(len(self.bar_input_states)))+\".npy\")\n",
        "\n",
        "\n",
        "        elif q_vals[0][0] < q_vals[0][1]: #i.e. if it is better for the cell to be a fire break than empty\n",
        "          self.emp_Q_val.append(q_vals)\n",
        "          self.emp_cells.append(cell)\n",
        "          #self.emp_input_states.append(self.input_forest)\n",
        "          os.chdir(emp_directory)\n",
        "          np.save(emp_filename.replace(\"index\", str(len(self.emp_input_states)))+\".npy\",\n",
        "                      np.reshape(self.input_forest, (1,16,16,4))) #save image to filename in bar_directory\n",
        "          self.emp_input_states.append(emp_filename.replace(\"index\", str(len(self.emp_input_states)))+\".npy\")\n",
        "\n",
        "    return #returns location of barrier cells, and the (32x32) input forest from before the barrier cell is put down\n",
        "\n",
        "\n",
        "  def update_explor_prob(self):\n",
        "    \"\"\"Updates exploration probability using episilon greedy policy\"\"\"\n",
        "\n",
        "    self._exploration_prob = self._exploration_prob * np.exp(-self._exploration_prob_decay)\n",
        "\n",
        "\n",
        "  def calc_reward(self, forest, time_sim = 16):\n",
        "    \"\"\" Calculates the reward for a fire barrier set up. Reward is determined by\n",
        "    the difference in burnt/burning area before and after the fire breaks are\n",
        "    placed. Reward depends on if action is a barrier or empty.\n",
        "    forest (array) - forest array up to point at which fire breaks should be placed\n",
        "    time_sim (int) - length of time simulation goes on for default of 16 time steps\n",
        "                     (assuming current forest is 3 time step)\n",
        "    \"\"\"\n",
        "    temp_bar = np.zeros(np.shape(forest)).astype(int) #create a zeros array for temporary barrier as we assume no temp barriers\n",
        "    per_bar = np.zeros(np.shape(forest)).astype(int)\n",
        "    self.bar_reward = []\n",
        "    self.emp_reward = []\n",
        "    self.emp_input_states_used = []\n",
        "    self.emp_Q_val_used = []\n",
        "    for bar in self.bar_cells:\n",
        "      x,y = bar\n",
        "      per_bar[x][y] = 5 #barrier forest updates with barriers\n",
        "\n",
        "    #must do no barrier first or else the simulation will remember the barrier\n",
        "    final_forest, burnt_area, alt0, wind0 = simulation(2, 4, 4, False, forest,\n",
        "                                        time_sim, temp_bar, temp_bar,\n",
        "                                        self.length_of_barrier, 0)\n",
        "    bar_final_forest, bar_burnt_area, alt1, wind1 = simulation(2, 4, 4, False,\n",
        "                                                  forest, time_sim, per_bar,\n",
        "                                                  temp_bar, self.length_of_barrier,\n",
        "                                                  0)\n",
        "    burnt_area_diff = burnt_area - bar_burnt_area #total burnt area difference, used for evaluation\n",
        "\n",
        "    #reward for barrier cells\n",
        "    for cell in self.bar_cells:\n",
        "      x,y = cell\n",
        "      bar_burnt = 0\n",
        "      burnt = 0\n",
        "      not_near_burning_cells = True\n",
        "      not_touching_bar = True\n",
        "      touching = 0\n",
        "      for i in range(-8, 8):\n",
        "        for j in range(-8, 8):\n",
        "          if x+i > 128 or y+j > 128 or x+i < 0 or y+j < 0:\n",
        "           pass\n",
        "          else:\n",
        "            if bar_final_forest[x+i][y+j] == 3 or bar_final_forest[x+i][y+j] == 4:\n",
        "              bar_burnt += 1\n",
        "            if final_forest[x+i][y+j] == 3 or final_forest[x+i][y+j] == 4:\n",
        "              burnt += 1\n",
        "            if 2 < i < 2 and 2 < j < 2:\n",
        "              if bar_final_forest[x+i][y+j] == 4 or bar_final_forest[x+i][y+j] == 3:\n",
        "                near_burning_cells = False\n",
        "              if bar_final_forest[x+i][y+j] == 5:\n",
        "                not_touching_bar = False\n",
        "                touching += 1\n",
        "\n",
        "      burnt_diff = burnt - bar_burnt\n",
        "      if burnt_diff < 0:\n",
        "        self.bar_reward.append(1 * (burnt_diff/64)) #as 20 is likely max burnt diff so this normalises the reward\n",
        "      if burnt_diff == 0:\n",
        "        self.bar_reward.append(-1*(1/100)) #assigning a small negative value for 0 as we want a positive burnt diff\n",
        "      if burnt_diff > 0:\n",
        "        self.bar_reward.append(1 * (burnt_diff/64))\n",
        "      if not_near_burning_cells:\n",
        "        self.bar_reward[-1] += -(6/300) #add a negative reward if the barrier cell has no burnt cells around it (its probably wrong)\n",
        "      if not_touching_bar:\n",
        "        self.bar_reward[-1] += -(4/300) #add a negative reward for barrier cell not touching any other barrier cells\n",
        "      if touching > 3:\n",
        "        self.bar_reward[-1] += (4/300)\n",
        "\n",
        "    #reward for empty cells\n",
        "    for i in range(int(len(self.emp_cells)/5)): #this is ind\n",
        "      input_state = random.choice(self.emp_input_states)\n",
        "      self.emp_input_states_used.append(input_state) #randomly selects empty input states to actually use\n",
        "      index = self.emp_input_states.index(input_state)\n",
        "      self.emp_input_states.remove(input_state) #removes from self.input_states so as not to repeat values\n",
        "      self.emp_Q_val_used.append(self.emp_Q_val[index])\n",
        "      cell = self.emp_cells[index]\n",
        "      x,y = cell\n",
        "      emp_burnt = 0\n",
        "      burnt = 0\n",
        "      for i in range(-8, 8):\n",
        "        for j in range(-8, 8):\n",
        "          if x+i > 128 or y+j > 128 or x+i < 0 or y+j < 0:\n",
        "           pass\n",
        "          else:\n",
        "            if bar_final_forest[x+i][y+j] == 3 or bar_final_forest[x+i][y+j] == 4:\n",
        "              emp_burnt += 1\n",
        "            if final_forest[x+i][y+j] == 3 or final_forest[x+i][y+j] == 4:\n",
        "              burnt += 1\n",
        "\n",
        "\n",
        "      burnt_diff = burnt - emp_burnt\n",
        "      if burnt_diff < 0:\n",
        "        self.emp_reward.append(1 * ((burnt_diff)/256)) #normalised reward\n",
        "      if burnt_diff == 0:\n",
        "        self.emp_reward.append(0) #assigning a small negative value for 0 as we want a positive burnt diff\n",
        "      if burnt_diff > 0:\n",
        "        self.emp_reward.append(1 * (burnt_diff/256))\n",
        "      if len(self.bar_cells) < self.length_of_barrier: #punishing empty cells for being empty if not enough barriers are deployed\n",
        "        self.emp_reward[-1] += - (15/256)\n",
        "\n",
        "\n",
        "    del final_forest\n",
        "    gc.collect()\n",
        "    return bar_final_forest[-1], burnt_area_diff\n",
        "\n",
        "  def save_memory(self, current_state, action, reward, next_state, q_current_state, done):\n",
        "    \"\"\" This meothod saves a memory to the memory buffer\"\"\"\n",
        "    #move file to new folder where memories are stored\n",
        "    global buffer_index\n",
        "    if action == 0:\n",
        "      shutil.move(bar_directory+\"/\"+current_state, buffer_directory+\"/\"+\n",
        "                        filename.replace(\"index\", str(buffer_index%self.max_memory_buffer)+\".npy\")) #modulo operator used to only allow buffer index between 0-249\n",
        "      current_state =  filename.replace(\"index\", str(buffer_index%self.max_memory_buffer)+\".npy\") #change current_state to point towards the new correct file\n",
        "    else:\n",
        "      shutil.move(emp_directory+\"/\"+current_state, buffer_directory+\"/\"+\n",
        "                        emp_filename.replace(\"index\", str(buffer_index%self.max_memory_buffer)+\".npy\"))\n",
        "      current_state = emp_filename.replace(\"index\", str(buffer_index%self.max_memory_buffer)+\".npy\")\n",
        "\n",
        "    self.memory_buffer.append({\n",
        "        \"current_state\":current_state,\n",
        "        \"action\":action,\n",
        "        \"reward\":reward,\n",
        "        \"next_state\":next_state,\n",
        "        \"q_current_state\":q_current_state,\n",
        "        \"done\" :done\n",
        "      })\n",
        "  def store_episode(self,current_state, action, reward, next_state, q_current_state, done):\n",
        "    \"\"\"This method stores the episode to memory using a dictionary\"\"\"\n",
        "    global buffer_index\n",
        "    if len(self.memory_buffer) < self.max_memory_buffer:\n",
        "      self.save_memory(current_state, action, reward, next_state, q_current_state, done)\n",
        "      buffer_index += 1\n",
        "      return\n",
        "\n",
        "    if len(self.memory_buffer) >= self.max_memory_buffer:  #If the size of memory buffer equals its maximum, we remove the oldest experience\n",
        "      files = os.listdir(buffer_directory)\n",
        "      os.chdir(buffer_directory)\n",
        "      for file in files:\n",
        "        if str(buffer_index) in file:\n",
        "          os.remove(file) #remove file from directory\n",
        "          index = [memory[\"current_state\"] for memory in self.memory_buffer].index(file)\n",
        "          self.memory_buffer.pop(index) #remove memory from buffer\n",
        "          self.save_memory(current_state, action, reward, next_state, q_current_state, done)\n",
        "          buffer_index += 1\n",
        "          return\n",
        "\n",
        "\n",
        "  #at the end of the episode train the network\n",
        "  def train(self, loss = False):\n",
        "    #shuffle memory buffer and select a batch size of experiences\n",
        "    np.random.shuffle(self.memory_buffer)\n",
        "    batch_sample = self.memory_buffer[0:self._batch_size]\n",
        "\n",
        "    # We iterate over the selected experiences\n",
        "    for experience in batch_sample:\n",
        "      loss_val = 0\n",
        "      q_current_state = experience[\"q_current_state\"]\n",
        "      os.chdir(buffer_directory)\n",
        "      try:\n",
        "        input_state = np.load(experience[\"current_state\"], mmap_mode = 'r').astype(int)\n",
        "      except:\n",
        "        print(\"There is no file in memory buffer\", experience[\"current_state\"])\n",
        "      input_state = np.reshape(input_state, (1,16,16,4))\n",
        "      # We compute the Q-target using Bellman optimality equation\n",
        "      q_target = experience[\"reward\"]\n",
        "      if not experience[\"done\"]: #for the time being all experience[\"done\"] will be true\n",
        "        q_target = q_target + self.gamma*np.max(self.model.predict(experience[\"next_state\"])[0]/5, verbose = 0)\n",
        "      q_current_state[0][experience[\"action\"]] = q_target\n",
        "      # train the model\n",
        "      self.model.fit(input_state, q_current_state, verbose=0) #callbacks = [GarbageCollectorCallback()], experience['current_state']\n",
        "      if loss:\n",
        "        loss_val += self.model.history.history['loss'][0] #to sum the loss to the loss for this minibatch\n",
        "    if loss:\n",
        "      self.loss_value = loss_val/self._batch_size #loss/self._batch_size returns mean loss for all minibatch training\n",
        "\n",
        "\n",
        "  def cyclic_lr(self, start_lr, factor, epoch):\n",
        "    \"\"\" This method is used to find the range of optimial learning rates by exponentially increasing learing rate\n",
        "        start_lr (float) - learing rate value to begin the cyclic exploration\n",
        "        factor (float) - exponential factor\n",
        "        epoch (int) - number of training batches there has been \"\"\"\n",
        "    global lr, loss_value\n",
        "    lr.append(self._lr)\n",
        "    loss_values.append(self.loss_value)\n",
        "    self._lr = start_lr * np.exp(epoch*factor)\n",
        "\n",
        "\n",
        "  def evaluate_net(self, forest, alt, wind, time_sim = 16):\n",
        "    \"\"\"This method is used to calculate the Networks best performance\n",
        "      forest (array) - forest array up to point at which fire breaks should be placed\n",
        "      time_sim (int) - length of time simulation goes on for default of 16 time steps\n",
        "                    (assuming current forest is 3 time step)\"\"\"\n",
        "    self._best_cells = []\n",
        "    self._best_qval = []\n",
        "    self.input_forest = np.zeros((1, self.input_row, self.input_col,4)).astype(int)\n",
        "    for cell in self._neighbour_coord:\n",
        "      x,y = cell\n",
        "      #obtain input matrix\n",
        "      for i in range(-8, 8):\n",
        "        for j in range(-8, 8):\n",
        "          if x+i > 128 or y+j > 128 or x+i < 0 or y+j < 0:\n",
        "            self.input_forest[0][i][j][0] = 1 #as this is 'no fuel' cell\n",
        "            self.input_forest[0][i][j][1] = 0 #as there should be 0 altitude\n",
        "            self.input_forest[0][i][j][2] = 0 #as there is 0 wind effects\n",
        "            self.input_forest[0][i][j][3] = 0 #as there are no burning cells out of bounds\n",
        "\n",
        "\n",
        "          else:\n",
        "            self.input_forest[0][i][j][0] = forest[i+x][j+y]/5 # / to normalise\n",
        "            self.input_forest[0][i][j][1] = alt[i+x][j+y]/np.max(alt)\n",
        "            self.input_forest[0][i][j][2] = self.wind_matrix[i+x][j+y]/np.max(wind)\n",
        "            self.input_forest[0][i][j][3] = self.burning_matrix[i+x][j+y]\n",
        "\n",
        "      q_vals = self.model.predict(self.input_forest, verbose = 0)\n",
        "      if q_vals[0][0] > q_vals[0][1]: #i.e. if it is better for the cell to be a fire break than empty\n",
        "        if len(self._best_cells) == self.length_of_barrier:\n",
        "          if q_vals[0][0] > np.min(np.array(self._best_qval)[:,0,0]):\n",
        "            index = np.argmin(np.array(self._best_qval)[:,0,0])\n",
        "            #update the barrier lists with the new cell\n",
        "            self._best_qval[index] = q_vals\n",
        "            self._best_cells[index] = cell\n",
        "        elif len(self._best_qval) < self.length_of_barrier: #getting barrier of cells of the correct size\n",
        "          self._best_qval.append(q_vals)\n",
        "          self._best_cells.append(cell) #we don't need to record the input states so we aren't doing that here\n",
        "\n",
        "\n",
        "    #now that we have the optimal cells for the barriers to be, we must simulate the fire spread\n",
        "    temp_bar = np.zeros(np.shape(forest)) #create a zeros array for temporary barrier as we assume no temp barriers\n",
        "    per_bar = np.zeros(np.shape(forest))\n",
        "    print(self._best_cells)\n",
        "    for bar in self._best_cells:\n",
        "      x,y = bar\n",
        "      per_bar[x][y] = 5 #makes it a permenant barrier\n",
        "    #must do no barrier first or else the simulation will remember the barrier\n",
        "\n",
        "    #simulating\n",
        "    final_forest, burnt_area, alt, wind = simulation(2, 4, 4, False, forest,\n",
        "                                        time_sim, temp_bar, temp_bar,\n",
        "                                        self.length_of_barrier, 0)\n",
        "    bar_final_forest, bar_burnt_area, alt, wind = simulation(2, 4, 4, False,\n",
        "                                                  forest, time_sim, per_bar,\n",
        "                                                  temp_bar, self.length_of_barrier,\n",
        "                                                  0) #bar_forest_history2,\n",
        "    burnt_area_diff = burnt_area - bar_burnt_area #total burnt area difference, used for evaluation\n",
        "    #Get rid of the data once used to free up RAM space\n",
        "    self._best_cells = None\n",
        "    self._best_qval = None\n",
        "    alt = None\n",
        "    wind = None\n",
        "    del q_vals\n",
        "    del self.input_forest\n",
        "    gc.collect()\n",
        "    return burnt_area_diff, bar_final_forest, final_forest\n",
        "\n",
        "  def manage_emp_file(self):\n",
        "    \"\"\" Manages empty files so that only files in bar directory are accessed\"\"\"\n",
        "    os.chdir(bar_directory)\n",
        "    for filename in self.emp_input_states:\n",
        "      if filename not in os.listdir():\n",
        "        self.emp_input_states.remove(filename)\n",
        "\n",
        "    return self.emp_input_states\n",
        "\n",
        "#Miscellaneous classes/fucntions\n",
        "# Custom Callback To Include in Callbacks List At Training Time\n",
        "class GarbageCollectorCallback(tf.keras.callbacks.Callback):\n",
        "    def on_epoch_end(self, epoch, logs=None):\n",
        "        gc.collect()\n",
        "\n",
        "#Callback to get loss history\n",
        "class LossHistory(keras.callbacks.Callback):\n",
        "    def on_train_begin(self, logs={}):\n",
        "        self.losses = []\n",
        "\n",
        "    def on_batch_end(self, batch, logs={}):\n",
        "        self.losses.append(logs.get('loss'))\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-14kV8xq_f5F"
      },
      "source": [
        "## Training network"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 86,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 793
        },
        "id": "Bx-3C9pTVAjC",
        "outputId": "4aee07df-89a9-428c-e6de-2c08b43c7772"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_31\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d_31 (Conv2D)          (None, 16, 16, 4)         148       \n",
            "                                                                 \n",
            " max_pooling2d_31 (MaxPoolin  (None, 8, 8, 4)          0         \n",
            " g2D)                                                            \n",
            "                                                                 \n",
            " flatten_30 (Flatten)        (None, 256)               0         \n",
            "                                                                 \n",
            " dense_150 (Dense)           (None, 128)               32896     \n",
            "                                                                 \n",
            " dense_151 (Dense)           (None, 64)                8256      \n",
            "                                                                 \n",
            " dense_152 (Dense)           (None, 32)                2080      \n",
            "                                                                 \n",
            " dense_153 (Dense)           (None, 2)                 66        \n",
            "                                                                 \n",
            " dense_154 (Dense)           (None, 2)                 6         \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 43,452\n",
            "Trainable params: 43,452\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "IndexError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-86-01a5033075c4>\u001b[0m in \u001b[0;36m<cell line: 40>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     87\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     88\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mepoch\u001b[0m\u001b[0;34m%\u001b[0m\u001b[0;36m25\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 89\u001b[0;31m       \u001b[0mburnt_diff\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbar_state\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0memp_state\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mNetwork\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate_net\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcurrent_forest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwind\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     90\u001b[0m       \u001b[0mNetwork\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minput_forest\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;31m#to reduce memory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     91\u001b[0m       \u001b[0mbest_attempts\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mburnt_diff\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-85-0c671b62a2bf>\u001b[0m in \u001b[0;36mevaluate_net\u001b[0;34m(self, forest, alt, wind, time_sim)\u001b[0m\n\u001b[1;32m    451\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    452\u001b[0m           \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 453\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minput_forest\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mforest\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m5\u001b[0m \u001b[0;31m# / to normalise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    454\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minput_forest\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0malt\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0malt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    455\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minput_forest\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwind_matrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwind\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mIndexError\u001b[0m: index -8 is out of bounds for axis 0 with size 4"
          ]
        }
      ],
      "source": [
        "import gc #to clear RAM\n",
        "import glob #to clear folders\n",
        "import os\n",
        "\n",
        "#Defining constants over training\n",
        "bar_length = 30\n",
        "num_epochs = 750\n",
        "num_simulations = 1\n",
        "Network = DQN(2, [16,16], summary = True) #action space of 2, input image shape of (16,16,1) for each neighbour cell\n",
        "best_attempts = []\n",
        "buffer_index = 0\n",
        "loss_values = []\n",
        "lr = []\n",
        "\n",
        "\n",
        "\n",
        "#to plot the forest at every 50 epochs\n",
        "def plot_forest(forest_array, bar = False):\n",
        "  cmap = mpl.colors.ListedColormap(['orange', 'yellow', 'green', 'red', 'black', 'white', 'blue'])\n",
        "  cmap.set_over('0.25')\n",
        "  cmap.set_under('0.75')\n",
        "  bounds = [1.0, 2.02, 2.27, 3.01, 3.5, 5.1, 5.9, 6.9]\n",
        "  norm = mpl.colors.BoundaryNorm(bounds, cmap.N)\n",
        "  vegetation_matrix = forest\n",
        "  plt.imshow(forest + forest_array,  cmap = cmap, norm = norm, interpolation=\"none\" )\n",
        "  plt.axis('off')\n",
        "  if bar == False:\n",
        "    plt.title(\"Forest plot\")\n",
        "  elif bar == True:\n",
        "    plt.title(\"Forest plot with barriers\")\n",
        "\n",
        "  #plt.savefig(directory + 'fire_' + str(day).zfill(3) +'.png', format='png',bbox_inches='tight')\n",
        "\n",
        "  plt.show()\n",
        "  plt.close()\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "for epoch in range(num_epochs):\n",
        "  for sim in range(num_simulations):\n",
        "    #computing a new simulated fire (ignition is from the centre of the forest every time)\n",
        "    current_forest, alt, wind = simulation(1, 3, 3, False)\n",
        "    Network.burning_cells(current_forest, wind) #find the burning cells in each case\n",
        "    Network.choose_actions(current_forest, alt, wind, bar_length)\n",
        "    Network.manage_emp_file() #makes sure only files in empty directory can be accessed\n",
        "    next_state, burnt_area_diff = Network.calc_reward(current_forest)\n",
        "    done = True\n",
        "    #store memory\n",
        "    for i in range(len(Network.bar_reward)):\n",
        "      Network.store_episode(Network.bar_input_states[i], 0, Network.bar_reward[i],\n",
        "                            next_state, Network.bar_Q_val[i], done) #as an action of 0 means place barrier\n",
        "    for i in range(len(Network.emp_reward)):\n",
        "      Network.store_episode(Network.emp_input_states_used[i], 1, Network.emp_reward[i],\n",
        "                            next_state, Network.emp_Q_val_used[i], done)\n",
        "    Network.bar_Q_val = None\n",
        "    Network.emp_Q_val = None\n",
        "    Network.bar_input_states = None\n",
        "    Network.emp_input_states = None #reducing RAM\n",
        "    #once theres been num_simulations simulations, update network\n",
        "    if sim == (num_simulations-1):\n",
        "      Network.update_explor_prob()\n",
        "      #record learning rate (loss recorded within train method)\n",
        "      Network.train()\n",
        "      #Network.cyclic_lr(0.00001,0.07, epoch) #exponetial factor is 0.02\n",
        "\n",
        "      #clear Bar Forests and Emp Forests directories\n",
        "      os.chdir(\"/content/drive/MyDrive/ML/Bar Forests\")\n",
        "      for f in os.listdir():\n",
        "        os.remove(f)\n",
        "      os.chdir(\"/content/drive/MyDrive/ML/Emp Forests\")\n",
        "      for f in os.listdir():\n",
        "        os.remove(f)\n",
        "\n",
        "\n",
        "\n",
        "    if epoch == (num_epochs-1):\n",
        "      print('Epoch', epoch+1)\n",
        "      burnt_diff, bar_state, emp_state = Network.evaluate_net(current_forest, alt, wind)\n",
        "      Network.input_forest = None #to reduce memory\n",
        "      best_attempts.append(burnt_diff)\n",
        "      plot_forest(emp_state)\n",
        "      plot_forest(bar_state, True)\n",
        "      del bar_state\n",
        "      del emp_state\n",
        "      gc.collect()\n",
        "\n",
        "    if epoch%25 == 0:\n",
        "      burnt_diff, bar_state, emp_state = Network.evaluate_net(current_forest, alt, wind)\n",
        "      Network.input_forest = None #to reduce memory\n",
        "      best_attempts.append(burnt_diff)\n",
        "      plot_forest(emp_state)\n",
        "      plot_forest(bar_state, True)\n",
        "      del bar_state\n",
        "      del emp_state\n",
        "      del burnt_diff\n",
        "      gc.collect()\n",
        "\n",
        "    if epoch == 220:\n",
        "      burnt_diff, bar_state, emp_state = Network.evaluate_net(current_forest, alt, wind)\n",
        "      Network.input_forest = None #to reduce memory\n",
        "      best_attempts.append(burnt_diff)\n",
        "      plot_forest(emp_state)\n",
        "      plot_forest(bar_state, True)\n",
        "      del bar_state\n",
        "      del emp_state\n",
        "      del burnt_diff\n",
        "      gc.collect()\n",
        "\n",
        "    #clearing RAM\n",
        "    del next_state\n",
        "    del current_forest\n",
        "    del burnt_area_diff\n",
        "    del alt\n",
        "    del wind\n",
        "    gc.collect()\n",
        "\n",
        "  print('Epoch: ',epoch,' completed')\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lZOX5rPtrecL"
      },
      "source": [
        "## Testing performance"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "8c9ema-60jIl",
        "outputId": "d7b9e057-0b7c-4673-bb49-132f147014e3"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[]\n",
            "[]\n",
            "[]\n",
            "[]\n",
            "[]\n",
            "[]\n"
          ]
        }
      ],
      "source": [
        "##Num Epoch: 500, batch size: 64, learning rate: 0.001, exploration decay: 0.01\n",
        "#avg_burntcell_diff5 = avg_burntcell_diff\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "x_axis = [0,25,50,75,100,125,150, 175]\n",
        "plt.plot(x_axis, best_attempts, marker = 'x')\n",
        "plt.ylabel(\"Burnt Area Difference (in cells)\")\n",
        "plt.xlabel(\"Epoch Number\")\n",
        "plt.title(\"Forest Barrier Plan\")\n",
        "plt.grid(linestyle = 'dashed')\n",
        "plt.show()\n",
        "plt.close()\n",
        "\n",
        "#to clear Bar Forests and Emp forests folders\n",
        "import os\n",
        "import cv2\n",
        "import glob\n",
        "import numpy as np\n",
        "os.chdir(\"/content\")\n",
        "os.chdir(\"/content/drive/MyDrive/ML/Bar Forests\")\n",
        "print(os.listdir())\n",
        "for f in os.listdir():\n",
        "  os.remove(f)\n",
        "print(os.listdir())\n",
        "os.chdir(\"/content/drive/MyDrive/ML/Emp Forests\")\n",
        "print(os.listdir())\n",
        "for f in os.listdir():\n",
        "  os.remove(f)\n",
        "print(os.listdir())\n",
        "os.chdir(\"/content/drive/MyDrive/ML/Buffer Forests\")\n",
        "print(os.listdir())\n",
        "for f in os.listdir():\n",
        "  os.remove(f)\n",
        "print(os.listdir())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 70,
      "metadata": {
        "id": "Vs3NODGxqbLs",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "d4e63f03-83d4-4520-9470-1f9f608ce4f1"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-70-5070aa69a5db>\u001b[0m in \u001b[0;36m<cell line: 20>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0max2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_subplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m \u001b[0max2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mav_loss_val\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m \u001b[0max2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_xlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Average Learning Rate'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0max2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_ylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Loss'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(self, scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1686\u001b[0m         \"\"\"\n\u001b[1;32m   1687\u001b[0m         \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnormalize_kwargs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmlines\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLine2D\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1688\u001b[0;31m         \u001b[0mlines\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_lines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1689\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlines\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1690\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m    309\u001b[0m                 \u001b[0mthis\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m                 \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 311\u001b[0;31m             yield from self._plot_args(\n\u001b[0m\u001b[1;32m    312\u001b[0m                 this, kwargs, ambiguous_fmt_datakey=ambiguous_fmt_datakey)\n\u001b[1;32m    313\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m_plot_args\u001b[0;34m(self, tup, kwargs, return_kwargs, ambiguous_fmt_datakey)\u001b[0m\n\u001b[1;32m    502\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    503\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 504\u001b[0;31m             raise ValueError(f\"x and y must have same first dimension, but \"\n\u001b[0m\u001b[1;32m    505\u001b[0m                              f\"have shapes {x.shape} and {y.shape}\")\n\u001b[1;32m    506\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: x and y must have same first dimension, but have shapes (0,) and (4,)"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#Examining Learning Rates\n",
        "fig = plt.figure()\n",
        "ax1 = fig.add_subplot(1,1,1)\n",
        "av_loss_val = []\n",
        "window = 5\n",
        "for ind in range(len(loss_values) - window + 1): #creating moving average\n",
        "  av_loss_val.append(np.mean(loss_values[ind:ind+window]))\n",
        "for ind in range(window - 1): #getting the correct shape\n",
        "  av_loss_val.insert(0, np.nan)\n",
        "\n",
        "ax1.plot(lr, loss_values)\n",
        "ax1.set_xlabel('Learning rate')\n",
        "ax1.set_ylabel('Loss')\n",
        "ax1.set_title('Loss vs Learning Rate')\n",
        "ax1.set_xscale('log')\n",
        "plt.show()\n",
        "plt.close()\n",
        "fig = plt.figure()\n",
        "ax2 = fig.add_subplot(1,1,1)\n",
        "ax2.plot(lr, av_loss_val)\n",
        "ax2.set_xlabel('Average Learning Rate')\n",
        "ax2.set_ylabel('Loss')\n",
        "ax2.set_title('Loss vs Learning Rate')\n",
        "ax2.set_xscale('log')\n",
        "plt.xlim(0.0002, 0.001)\n",
        "plt.show()\n",
        "plt.close()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#to clear Bar Forests and Emp forests folders\n",
        "import os\n",
        "import cv2\n",
        "import glob\n",
        "import numpy as np\n",
        "os.chdir(\"/content\")\n",
        "os.chdir(\"/content/drive/MyDrive/ML/Bar Forests\")\n",
        "print(os.listdir())\n",
        "for f in os.listdir():\n",
        "  os.remove(f)\n",
        "print(os.listdir())\n",
        "os.chdir(\"/content/drive/MyDrive/ML/Emp Forests\")\n",
        "print(os.listdir())\n",
        "for f in os.listdir():\n",
        "  os.remove(f)\n",
        "print(os.listdir())\n",
        "os.chdir(\"/content/drive/MyDrive/ML/Buffer Forests\")\n",
        "print(os.listdir())\n",
        "for f in os.listdir():\n",
        "  os.remove(f)\n",
        "print(os.listdir())\n"
      ],
      "metadata": {
        "id": "q1-qA4OGZlof",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d3a6ce21-4f90-4515-af0f-53c85f3b38b1"
      },
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[]\n",
            "[]\n",
            "[]\n",
            "[]\n",
            "['bar_input_forest 0.npy', 'bar_input_forest 1.npy', 'bar_input_forest 2.npy', 'bar_input_forest 3.npy', 'bar_input_forest 4.npy', 'bar_input_forest 5.npy', 'bar_input_forest 6.npy', 'bar_input_forest 7.npy', 'bar_input_forest 8.npy', 'bar_input_forest 9.npy', 'bar_input_forest 10.npy', 'emp_input_forest 58.npy', 'bar_input_forest 11.npy', 'bar_input_forest 12.npy', 'bar_input_forest 13.npy', 'bar_input_forest 14.npy', 'bar_input_forest 15.npy', 'bar_input_forest 16.npy', 'bar_input_forest 17.npy', 'bar_input_forest 18.npy', 'emp_input_forest 36.npy', 'bar_input_forest 19.npy', 'emp_input_forest 43.npy', 'bar_input_forest 20.npy', 'bar_input_forest 21.npy', 'bar_input_forest 22.npy', 'bar_input_forest 23.npy', 'bar_input_forest 24.npy', 'emp_input_forest 61.npy', 'bar_input_forest 25.npy', 'bar_input_forest 26.npy', 'bar_input_forest 27.npy', 'bar_input_forest 28.npy', 'bar_input_forest 29.npy', 'emp_input_forest 49.npy', 'emp_input_forest 45.npy', 'emp_input_forest 33.npy', 'emp_input_forest 56.npy', 'emp_input_forest 63.npy', 'emp_input_forest 57.npy', 'emp_input_forest 32.npy', 'emp_input_forest 30.npy', 'emp_input_forest 31.npy', 'emp_input_forest 35.npy', 'emp_input_forest 52.npy', 'emp_input_forest 59.npy', 'emp_input_forest 46.npy', 'emp_input_forest 42.npy', 'emp_input_forest 54.npy', 'emp_input_forest 53.npy', 'emp_input_forest 34.npy', 'emp_input_forest 55.npy', 'emp_input_forest 38.npy', 'emp_input_forest 50.npy', 'emp_input_forest 37.npy', 'emp_input_forest 39.npy', 'emp_input_forest 60.npy', 'emp_input_forest 44.npy', 'emp_input_forest 48.npy', 'emp_input_forest 47.npy', 'emp_input_forest 51.npy', 'emp_input_forest 62.npy', 'emp_input_forest 41.npy', 'emp_input_forest 40.npy']\n",
            "[]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#print(Network.bar_cells)\n",
        "#print(Network._best_cells)\n",
        "print(Network.wind_matrix)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W8TBYIe1Uiu6",
        "outputId": "e63518ee-77f2-400f-8049-51f5a0c50426"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "URNMbIgORiCQ"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}